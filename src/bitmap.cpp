// Copyright (c) 2022 Trevor Makes

#include "main.hpp"

#include "core/mon.hpp"

constexpr uint8_t BITMAP_ROWS = 64;
constexpr uint8_t BITMAP_COL_BYTES = 8;
constexpr uint8_t BITS_PER_BYTE = 8;
constexpr uint8_t BITMAP_COL_BITS = BITMAP_COL_BYTES * BITS_PER_BYTE;
constexpr size_t BITMAP_BYTES = BITMAP_ROWS * BITMAP_COL_BYTES;

uint8_t BITMAP_RAM[BITMAP_BYTES];

static uint8_t g_pixel_hold = 3;

void set_delay(Args args) {
  g_pixel_hold = atoi(args.next());
}

template <bool FLIP_H>
void write_bits(uint8_t x, const uint8_t y, uint8_t bits) {
  // Skip blank scanlines
  if (bits == 0) return;

  // Write Y only if we find a non-blank scanline
  write_y(y);

  // Write X for each set bit
  do {
    if (FLIP_H) --x; // Pre-decrement if reversed
    if (bits & 0x80) {
      write_x(x); // Draw if MSB set
      delayMicroseconds(g_pixel_hold);
    }
    if (!FLIP_H) ++x; // Post-decrement if forwards
  } while ((bits <<= 1) > 0); // Shift next bit into MSB
}

// Trace set bitmap pixels with X and Y
template <bool FLIP_H, bool FLIP_V>
void draw_bitmap() {
  const uint8_t* bitmap_ptr = BITMAP_RAM;
  // For row in [0, BITMAP_ROWS), reversed if FLIP_V set
  for (uint8_t row = FLIP_V ? BITMAP_ROWS : 0; ; ) {
    // Pre-decrement row if reversed
    if (FLIP_V) {
      if (row == 0) break;
      --row;
    }
    // For col in [0, BITMAP_ROWS), reversed if FLIP_H set
    for (uint8_t col = FLIP_H ? BITMAP_COL_BITS : 0; ; ) {
      write_bits<FLIP_H>(col, row, *bitmap_ptr++);
      // Post-increment/decrement col
      if (FLIP_H) {
        col -= BITS_PER_BYTE;
        if (col == 0) break;
      } else {
        col += BITS_PER_BYTE;
        if (col == BITMAP_COL_BITS) break;
      }
    }
    // Post-increment row if forwards
    if (!FLIP_V) {
      ++row;
      if (row == BITMAP_ROWS) break;
    }
  }
}

bool g_flip_v = false;
bool g_flip_h = false;

void bitmap_idle() {
  if (g_flip_h) {
    if (g_flip_v) {
      draw_bitmap<true, true>();
    } else {
      draw_bitmap<true, false>();
    }
  } else {
    if (g_flip_v) {
      draw_bitmap<false, true>();
    } else {
      draw_bitmap<false, false>();
    }
  }
}

void flip_vertical(Args) {
  g_flip_v = !g_flip_v;
}

void flip_horizontal(Args) {
  g_flip_h = !g_flip_h;
}

void copy_bitmap(const uint8_t* source) {
  memcpy_P(BITMAP_RAM, source, BITMAP_BYTES);
  g_idle_fn = bitmap_idle;
}

struct API : public core::mon::Base<API> {
  static StreamEx& get_stream() { return g_serial_ex; }
  static uint8_t read_byte(uint16_t addr) { return BITMAP_RAM[addr]; }
  static void write_byte(uint16_t addr, uint8_t data) { BITMAP_RAM[addr % BITMAP_BYTES] = data; }
};

void export_bitmap(Args) {
  core::mon::impl_save<API>(0, BITMAP_BYTES);
}

void import_bitmap(Args args) {
  core::mon::cmd_load<API>(args);
}

extern const uint8_t DOGE_ROM[] PROGMEM;

// Start drawing Doge bitmap in idle loop
void init_doge(Args) {
  copy_bitmap(DOGE_ROM);
}

extern const uint8_t PEPE_ROM[] PROGMEM;

// Start drawing Pepe bitmap in idle loop
void init_pepe(Args) {
  copy_bitmap(PEPE_ROM);
}

// 64x64 1-bit Doge bitmap
const uint8_t DOGE_ROM[BITMAP_BYTES] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x7C, 0x00,
  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0xD4, 0x00,
  0x00, 0x00, 0x3D, 0x80, 0x00, 0x01, 0xAA, 0x00,
  0x00, 0x00, 0x1E, 0x80, 0x00, 0x03, 0xEA, 0x00,
  0x00, 0x00, 0x1B, 0xC0, 0x00, 0x0E, 0xB6, 0x00,
  0x00, 0x00, 0x3D, 0x40, 0x00, 0x0F, 0xAA, 0x00,
  0x00, 0x00, 0x3A, 0xF0, 0x00, 0x3A, 0xD5, 0x00,
  0x00, 0x00, 0x3F, 0xFF, 0x64, 0x3A, 0xAB, 0x00,
  0x00, 0x00, 0x2F, 0xFF, 0xFF, 0xD6, 0xAB, 0x00,
  0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x75, 0x55, 0x00,
  0x00, 0x00, 0xFF, 0xEF, 0xFE, 0x95, 0x15, 0x00,
  0x00, 0x01, 0xFF, 0xEB, 0xFF, 0xD6, 0x8B, 0x00,
  0x00, 0x03, 0xFF, 0xBF, 0xFF, 0xAA, 0x36, 0x00,
  0x00, 0x0F, 0xFF, 0xAA, 0xDF, 0xD5, 0x16, 0x00,
  0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xEA, 0x5A, 0x00,
  0x00, 0x3F, 0xFF, 0x5F, 0xF7, 0xF4, 0x2E, 0x00,
  0x00, 0x7F, 0xFF, 0xFF, 0xDF, 0xFA, 0xD2, 0x00,
  0x00, 0x7F, 0xFF, 0x5F, 0xEB, 0xFF, 0x5E, 0x00,
  0x00, 0xFC, 0x3D, 0xBF, 0xFF, 0xFE, 0xEB, 0x00,
  0x01, 0xFF, 0x1F, 0xBF, 0xF5, 0xFF, 0xAB, 0x80,
  0x01, 0xFC, 0x7F, 0xFF, 0xFE, 0xFF, 0xD5, 0x80,
  0x01, 0xFE, 0x1F, 0xFE, 0x2F, 0xFF, 0xF5, 0x80,
  0x03, 0xFA, 0x7F, 0xF5, 0x97, 0xFF, 0xEB, 0x80,
  0x03, 0xFF, 0x7F, 0xD1, 0x03, 0xFF, 0xF5, 0xC0,
  0x03, 0xFF, 0xFF, 0xD2, 0x0F, 0xFF, 0xFB, 0xC0,
  0x07, 0xFF, 0xFF, 0xD9, 0x17, 0xFF, 0xFD, 0xC0,
  0x07, 0xFF, 0xFF, 0xEA, 0xBF, 0xFF, 0xFB, 0xC0,
  0x07, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFB, 0xC0,
  0x07, 0xF5, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
  0x07, 0xD5, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
  0x0F, 0xC0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
  0x0F, 0xC0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xC0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
  0x0F, 0xC0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFB, 0xF0,
  0x0F, 0xC0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFD, 0xF0,
  0x0F, 0xE0, 0xAF, 0xFF, 0xFF, 0xFF, 0xFD, 0xF0,
  0x0F, 0x90, 0x5F, 0xFF, 0xFF, 0xFF, 0xF7, 0xF0,
  0x0F, 0xAA, 0x2B, 0xFF, 0xFF, 0xFF, 0xF5, 0x78,
  0x0F, 0xC1, 0x5E, 0xFF, 0xFF, 0xFF, 0xEF, 0xF8,
  0x07, 0xE0, 0x2B, 0xD7, 0xFF, 0xFF, 0xFA, 0xBC,
  0x0F, 0xD0, 0x1E, 0xAF, 0xFF, 0xFF, 0xEF, 0xF8,
  0x07, 0xE8, 0x04, 0x17, 0xFF, 0xFF, 0xF5, 0x7C,
  0x07, 0xF5, 0x42, 0xDF, 0xFF, 0xFF, 0xEF, 0xBC,
  0x07, 0xFD, 0x75, 0x5F, 0xFF, 0xFF, 0xFA, 0xDE,
  0x03, 0xFA, 0xAE, 0xFF, 0xFF, 0xFF, 0xAD, 0x7E,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xAE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5A, 0xFE,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0xAE,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xED, 0xFE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xB5, 0x5E,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFE,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0xFE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xDB, 0xFE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFE,
  0x01, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xFF, 0x55, 0xBF, 0xFF, 0xBF, 0xFE,
  0x03, 0xFF, 0xAA, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xFF, 0x57, 0xFF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xEB, 0xBF, 0xFF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
};

// 64x64 1-bit Pepe bitmap
const uint8_t PEPE_ROM[BITMAP_BYTES] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xF8, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFE, 0x05, 0xF8, 0x00, 0x00,
  0x00, 0x01, 0xFF, 0xD6, 0x0F, 0xFE, 0x00, 0x00,
  0x00, 0x03, 0xFC, 0x00, 0x1F, 0xFC, 0x00, 0x00,
  0x00, 0x07, 0xE0, 0xFF, 0x0F, 0xE0, 0x00, 0x00,
  0x00, 0x0F, 0x8F, 0xFF, 0xF1, 0xFF, 0xF0, 0x00,
  0x00, 0x1F, 0x3F, 0xFF, 0x00, 0xFF, 0xF8, 0x00,
  0x00, 0x3F, 0xFF, 0x80, 0xFC, 0x3E, 0x00, 0x00,
  0x00, 0x3F, 0xFE, 0x00, 0x7E, 0x00, 0xFF, 0xF0,
  0x00, 0x7F, 0xF8, 0x07, 0xFF, 0x00, 0x1F, 0x98,
  0x00, 0x7F, 0xF8, 0x3F, 0xFF, 0x87, 0xFF, 0xF0,
  0x00, 0x7F, 0xF0, 0xFF, 0x87, 0xCF, 0xF8, 0xF8,
  0x00, 0x7F, 0xCF, 0xFF, 0x03, 0xEF, 0xF0, 0x7C,
  0x00, 0xFF, 0xDF, 0xFE, 0x03, 0xEF, 0xE0, 0x3C,
  0x00, 0xFF, 0xCF, 0xFE, 0x01, 0xE7, 0xE0, 0x3C,
  0x00, 0xFF, 0xC7, 0xFE, 0x31, 0xE7, 0xE0, 0x3C,
  0x00, 0xFF, 0xF3, 0xFC, 0x39, 0xE7, 0xE3, 0x3C,
  0x03, 0xFF, 0xF9, 0xFE, 0x31, 0xE7, 0xE2, 0x3C,
  0x07, 0xFF, 0xF8, 0xFE, 0x03, 0xE7, 0xF0, 0x7C,
  0x0F, 0xFF, 0xF8, 0x7F, 0x07, 0xE1, 0xFF, 0xFC,
  0x0F, 0xFF, 0xFC, 0x1F, 0xFF, 0xC4, 0x7F, 0xF8,
  0x1F, 0xFF, 0xFE, 0x07, 0xFF, 0x83, 0x03, 0xC0,
  0x1F, 0xFF, 0xFF, 0x00, 0x7C, 0x19, 0x0F, 0xF0,
  0x3F, 0xFF, 0xFF, 0xE3, 0xFE, 0x3C, 0xF0, 0x00,
  0x3F, 0xFF, 0xF1, 0xF8, 0x50, 0x7E, 0x7C, 0x00,
  0x3F, 0xFF, 0xF8, 0x3F, 0x01, 0xFE, 0x00, 0x00,
  0x3F, 0xFF, 0xFD, 0x02, 0x03, 0xFF, 0x05, 0x40,
  0x3F, 0xFF, 0xFF, 0x80, 0x5F, 0xFF, 0x9F, 0xE0,
  0x3F, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xE0,
  0x3F, 0xEE, 0x3F, 0xFF, 0xFF, 0xFF, 0xDF, 0xF0,
  0x3F, 0xC8, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0x3F, 0xD9, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0x3F, 0xF3, 0xFC, 0x1F, 0xFF, 0xFF, 0xFF, 0xC8,
  0x3F, 0xF3, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0x3C,
  0x3F, 0xF3, 0x87, 0xF8, 0x0F, 0xFF, 0xE0, 0xF8,
  0x3F, 0xF9, 0x80, 0xFF, 0x80, 0x00, 0x07, 0xC0,
  0x3F, 0xFC, 0xC4, 0x1F, 0xFF, 0xFC, 0x00, 0x00,
  0x3F, 0xFC, 0xC7, 0x40, 0xFF, 0xFE, 0x00, 0x00,
  0x3F, 0xFF, 0x71, 0xE0, 0x00, 0x00, 0x70, 0x80,
  0x3F, 0xFF, 0x30, 0x60, 0x00, 0x01, 0xF9, 0xC0,
  0x1F, 0xFF, 0x9C, 0x00, 0x1F, 0xA1, 0xFC, 0xE0,
  0x1F, 0xFF, 0xCF, 0x0C, 0x0F, 0xF9, 0xFE, 0x60,
  0x0F, 0xFF, 0xE3, 0x9F, 0x83, 0xF8, 0xFF, 0x30,
  0x07, 0xFF, 0xF1, 0xE7, 0xE1, 0xF8, 0xFF, 0x30,
  0x03, 0xFF, 0xFC, 0xF0, 0xF8, 0x51, 0xFE, 0x70,
  0x01, 0xFF, 0xFE, 0x3C, 0x1C, 0x03, 0xF0, 0xE0,
  0x00, 0x7F, 0xFF, 0x87, 0x80, 0x07, 0x03, 0xC0,
  0x00, 0x3F, 0xFF, 0xC1, 0xFF, 0xFE, 0x07, 0x00,
  0x00, 0x0F, 0xFF, 0xF0, 0x7F, 0xF8, 0x0E, 0x00,
  0x00, 0x07, 0xFF, 0xFE, 0x0F, 0x83, 0xFE, 0x00,
  0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x3F, 0xFE, 0x00,
  0x00, 0x00, 0x7F, 0xFF, 0xFB, 0x7F, 0xF8, 0x00,
  0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,
  0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
  0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
