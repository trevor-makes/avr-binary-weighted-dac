// Copyright (c) 2022 Trevor Makes

#include "uIO.hpp"
#include "uCLI.hpp"

#include <Arduino.h>

#if defined(ARDUINO_AVR_UNO) || defined(ARDUINO_AVR_NANO)
  // For ATmega 328p boards, the two highest bits of ports B and C are
  // unavailable, so we set a mask to prevent writing to these bits.
  // This allows values from 0 to 63 to be written to each port.
  using PortB = uIO::PortB::Mask<0x3F>;
  using PortC = uIO::PortC::Mask<0x3F>;
#else
  #error The I/O port mapping has not been defined for the target platform
#endif

// Commodore 64 font extracted from VICE
// The 8x8 character data is stored in read-only program memory to save RAM.
// The characters are in ASCII order starting at 0x20 (space), with each
// character occupying 8 bytes. Each byte represents a row of pixels and each
// bit represents a pixel in that row, as in the character 'A':
// ...##... 0x18
// ..####.. 0x3C
// .##..##. 0x66
// .######. 0x7E
// .##..##. 0x66
// .##..##. 0x66
// .##..##. 0x66
// ........ 0x00
const uint8_t CHAR_ROM[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // space
  0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00, // !
  0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, // "
  0x66, 0x66, 0xFF, 0x66, 0xFF, 0x66, 0x66, 0x00, // #
  0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00, // $
  0x62, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x46, 0x00, // %
  0x3C, 0x66, 0x3C, 0x38, 0x67, 0x66, 0x3F, 0x00, // &
  0x06, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, // '
  0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, // (
  0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, // )
  0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, // *
  0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, // +
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, // ,
  0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, // -
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, // .
  0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, // /
  0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00, // 0
  0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E, 0x00, // 1
  0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E, 0x00, // 2
  0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00, // 3
  0x06, 0x0E, 0x1E, 0x66, 0x7F, 0x06, 0x06, 0x00, // 4
  0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00, // 5
  0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00, // 6
  0x7E, 0x66, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00, // 7
  0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00, // 8
  0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00, // 9
  0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, // :
  0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30, // ;
  0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00, // <
  0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, // =
  0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00, // >
  0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00, // ?
  0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x62, 0x3C, 0x00, // @
  0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00, // A
  0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00, // B
  0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00, // C
  0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00, // D
  0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00, // E
  0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00, // F
  0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00, // G
  0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00, // H
  0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, // I
  0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x66, 0x00, // J
  0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00, // K
  0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00, // L
  0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00, // M
  0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00, // N
  0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, // O
  0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00, // P
  0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0E, 0x00, // Q
  0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00, // R
  0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00, // S
  0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, // T
  0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, // U
  0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, // V
  0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00, // W
  0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00, // X
  0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00, // Y
  0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00, // Z
  0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, // [
  0x0C, 0x12, 0x30, 0x7C, 0x30, 0x62, 0xFC, 0x00, // \ (lira/pound)
  0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, // ]
  0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, // ^ (up arrow)
  0x00, 0x10, 0x30, 0x7F, 0x7F, 0x30, 0x10, 0x00, // _ (left arrow)
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, // ` (bold -)
  0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00, // a
  0x00, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00, // b
  0x00, 0x00, 0x3C, 0x60, 0x60, 0x60, 0x3C, 0x00, // c
  0x00, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3E, 0x00, // d
  0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, // e
  0x00, 0x0E, 0x18, 0x3E, 0x18, 0x18, 0x18, 0x00, // f
  0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x7C, // g
  0x00, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x00, // h
  0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3C, 0x00, // i
  0x00, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x3C, // j
  0x00, 0x60, 0x60, 0x6C, 0x78, 0x6C, 0x66, 0x00, // k
  0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, // l
  0x00, 0x00, 0x66, 0x7F, 0x7F, 0x6B, 0x63, 0x00, // m
  0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00, // n
  0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, // o
  0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, // p
  0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06, // q
  0x00, 0x00, 0x7C, 0x66, 0x60, 0x60, 0x60, 0x00, // r
  0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00, // s
  0x00, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x0E, 0x00, // t
  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00, // u
  0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, // v
  0x00, 0x00, 0x63, 0x6B, 0x7F, 0x3E, 0x36, 0x00, // w
  0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00, // x
  0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x0C, 0x78, // y
  0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00, // z
  // ASCII characters {|}~ are not present
};

// 64x64 1-bit Doge bitmap
const uint8_t DOGE_ROM[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x7C, 0x00,
  0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0xD4, 0x00,
  0x00, 0x00, 0x3D, 0x80, 0x00, 0x01, 0xAA, 0x00,
  0x00, 0x00, 0x1E, 0x80, 0x00, 0x03, 0xEA, 0x00,
  0x00, 0x00, 0x1B, 0xC0, 0x00, 0x0E, 0xB6, 0x00,
  0x00, 0x00, 0x3D, 0x40, 0x00, 0x0F, 0xAA, 0x00,
  0x00, 0x00, 0x3A, 0xF0, 0x00, 0x3A, 0xD5, 0x00,
  0x00, 0x00, 0x3F, 0xFF, 0x64, 0x3A, 0xAB, 0x00,
  0x00, 0x00, 0x2F, 0xFF, 0xFF, 0xD6, 0xAB, 0x00,
  0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x75, 0x55, 0x00,
  0x00, 0x00, 0xFF, 0xEF, 0xFE, 0x95, 0x15, 0x00,
  0x00, 0x01, 0xFF, 0xEB, 0xFF, 0xD6, 0x8B, 0x00,
  0x00, 0x03, 0xFF, 0xBF, 0xFF, 0xAA, 0x36, 0x00,
  0x00, 0x0F, 0xFF, 0xAA, 0xDF, 0xD5, 0x16, 0x00,
  0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xEA, 0x5A, 0x00,
  0x00, 0x3F, 0xFF, 0x5F, 0xF7, 0xF4, 0x2E, 0x00,
  0x00, 0x7F, 0xFF, 0xFF, 0xDF, 0xFA, 0xD2, 0x00,
  0x00, 0x7F, 0xFF, 0x5F, 0xEB, 0xFF, 0x5E, 0x00,
  0x00, 0xFC, 0x3D, 0xBF, 0xFF, 0xFE, 0xEB, 0x00,
  0x01, 0xFF, 0x1F, 0xBF, 0xF5, 0xFF, 0xAB, 0x80,
  0x01, 0xFC, 0x7F, 0xFF, 0xFE, 0xFF, 0xD5, 0x80,
  0x01, 0xFE, 0x1F, 0xFE, 0x2F, 0xFF, 0xF5, 0x80,
  0x03, 0xFA, 0x7F, 0xF5, 0x97, 0xFF, 0xEB, 0x80,
  0x03, 0xFF, 0x7F, 0xD1, 0x03, 0xFF, 0xF5, 0xC0,
  0x03, 0xFF, 0xFF, 0xD2, 0x0F, 0xFF, 0xFB, 0xC0,
  0x07, 0xFF, 0xFF, 0xD9, 0x17, 0xFF, 0xFD, 0xC0,
  0x07, 0xFF, 0xFF, 0xEA, 0xBF, 0xFF, 0xFB, 0xC0,
  0x07, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFB, 0xC0,
  0x07, 0xF5, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
  0x07, 0xD5, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
  0x0F, 0xC0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
  0x0F, 0xC0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xC0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
  0x0F, 0xC0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFB, 0xF0,
  0x0F, 0xC0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFD, 0xF0,
  0x0F, 0xE0, 0xAF, 0xFF, 0xFF, 0xFF, 0xFD, 0xF0,
  0x0F, 0x90, 0x5F, 0xFF, 0xFF, 0xFF, 0xF7, 0xF0,
  0x0F, 0xAA, 0x2B, 0xFF, 0xFF, 0xFF, 0xF5, 0x78,
  0x0F, 0xC1, 0x5E, 0xFF, 0xFF, 0xFF, 0xEF, 0xF8,
  0x07, 0xE0, 0x2B, 0xD7, 0xFF, 0xFF, 0xFA, 0xBC,
  0x0F, 0xD0, 0x1E, 0xAF, 0xFF, 0xFF, 0xEF, 0xF8,
  0x07, 0xE8, 0x04, 0x17, 0xFF, 0xFF, 0xF5, 0x7C,
  0x07, 0xF5, 0x42, 0xDF, 0xFF, 0xFF, 0xEF, 0xBC,
  0x07, 0xFD, 0x75, 0x5F, 0xFF, 0xFF, 0xFA, 0xDE,
  0x03, 0xFA, 0xAE, 0xFF, 0xFF, 0xFF, 0xAD, 0x7E,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xAE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5A, 0xFE,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDA, 0xAE,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xED, 0xFE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xB5, 0x5E,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 0xFE,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 0xFE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xDB, 0xFE,
  0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFE,
  0x01, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xFF, 0x55, 0xBF, 0xFF, 0xBF, 0xFE,
  0x03, 0xFF, 0xAA, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xFF, 0x57, 0xFF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xEB, 0xBF, 0xFF, 0xFF, 0xFF, 0xFE,
  0x03, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
};

// 64x64 1-bit Pepe bitmap
const uint8_t PEPE_ROM[] PROGMEM = {    
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7F, 0xF8, 0x00, 0x40, 0x00, 0x00,
  0x00, 0x00, 0xFF, 0xFE, 0x05, 0xF8, 0x00, 0x00,
  0x00, 0x01, 0xFF, 0xD6, 0x0F, 0xFE, 0x00, 0x00,
  0x00, 0x03, 0xFC, 0x00, 0x1F, 0xFC, 0x00, 0x00,
  0x00, 0x07, 0xE0, 0xFF, 0x0F, 0xE0, 0x00, 0x00,
  0x00, 0x0F, 0x8F, 0xFF, 0xF1, 0xFF, 0xF0, 0x00,
  0x00, 0x1F, 0x3F, 0xFF, 0x00, 0xFF, 0xF8, 0x00,
  0x00, 0x3F, 0xFF, 0x80, 0xFC, 0x3E, 0x00, 0x00,
  0x00, 0x3F, 0xFE, 0x00, 0x7E, 0x00, 0xFF, 0xF0,
  0x00, 0x7F, 0xF8, 0x07, 0xFF, 0x00, 0x1F, 0x98,
  0x00, 0x7F, 0xF8, 0x3F, 0xFF, 0x87, 0xFF, 0xF0,
  0x00, 0x7F, 0xF0, 0xFF, 0x87, 0xCF, 0xF8, 0xF8,
  0x00, 0x7F, 0xCF, 0xFF, 0x03, 0xEF, 0xF0, 0x7C,
  0x00, 0xFF, 0xDF, 0xFE, 0x03, 0xEF, 0xE0, 0x3C,
  0x00, 0xFF, 0xCF, 0xFE, 0x01, 0xE7, 0xE0, 0x3C,
  0x00, 0xFF, 0xC7, 0xFE, 0x31, 0xE7, 0xE0, 0x3C,
  0x00, 0xFF, 0xF3, 0xFC, 0x39, 0xE7, 0xE3, 0x3C,
  0x03, 0xFF, 0xF9, 0xFE, 0x31, 0xE7, 0xE2, 0x3C,
  0x07, 0xFF, 0xF8, 0xFE, 0x03, 0xE7, 0xF0, 0x7C,
  0x0F, 0xFF, 0xF8, 0x7F, 0x07, 0xE1, 0xFF, 0xFC,
  0x0F, 0xFF, 0xFC, 0x1F, 0xFF, 0xC4, 0x7F, 0xF8,
  0x1F, 0xFF, 0xFE, 0x07, 0xFF, 0x83, 0x03, 0xC0,
  0x1F, 0xFF, 0xFF, 0x00, 0x7C, 0x19, 0x0F, 0xF0,
  0x3F, 0xFF, 0xFF, 0xE3, 0xFE, 0x3C, 0xF0, 0x00,
  0x3F, 0xFF, 0xF1, 0xF8, 0x50, 0x7E, 0x7C, 0x00,
  0x3F, 0xFF, 0xF8, 0x3F, 0x01, 0xFE, 0x00, 0x00,
  0x3F, 0xFF, 0xFD, 0x02, 0x03, 0xFF, 0x05, 0x40,
  0x3F, 0xFF, 0xFF, 0x80, 0x5F, 0xFF, 0x9F, 0xE0,
  0x3F, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xE0,
  0x3F, 0xEE, 0x3F, 0xFF, 0xFF, 0xFF, 0xDF, 0xF0,
  0x3F, 0xC8, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0x3F, 0xD9, 0xE1, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
  0x3F, 0xF3, 0xFC, 0x1F, 0xFF, 0xFF, 0xFF, 0xC8,
  0x3F, 0xF3, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0x3C,
  0x3F, 0xF3, 0x87, 0xF8, 0x0F, 0xFF, 0xE0, 0xF8,
  0x3F, 0xF9, 0x80, 0xFF, 0x80, 0x00, 0x07, 0xC0,
  0x3F, 0xFC, 0xC4, 0x1F, 0xFF, 0xFC, 0x00, 0x00,
  0x3F, 0xFC, 0xC7, 0x40, 0xFF, 0xFE, 0x00, 0x00,
  0x3F, 0xFF, 0x71, 0xE0, 0x00, 0x00, 0x70, 0x80,
  0x3F, 0xFF, 0x30, 0x60, 0x00, 0x01, 0xF9, 0xC0,
  0x1F, 0xFF, 0x9C, 0x00, 0x1F, 0xA1, 0xFC, 0xE0,
  0x1F, 0xFF, 0xCF, 0x0C, 0x0F, 0xF9, 0xFE, 0x60,
  0x0F, 0xFF, 0xE3, 0x9F, 0x83, 0xF8, 0xFF, 0x30,
  0x07, 0xFF, 0xF1, 0xE7, 0xE1, 0xF8, 0xFF, 0x30,
  0x03, 0xFF, 0xFC, 0xF0, 0xF8, 0x51, 0xFE, 0x70,
  0x01, 0xFF, 0xFE, 0x3C, 0x1C, 0x03, 0xF0, 0xE0,
  0x00, 0x7F, 0xFF, 0x87, 0x80, 0x07, 0x03, 0xC0,
  0x00, 0x3F, 0xFF, 0xC1, 0xFF, 0xFE, 0x07, 0x00,
  0x00, 0x0F, 0xFF, 0xF0, 0x7F, 0xF8, 0x0E, 0x00,
  0x00, 0x07, 0xFF, 0xFE, 0x0F, 0x83, 0xFE, 0x00,
  0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x3F, 0xFE, 0x00,
  0x00, 0x00, 0x7F, 0xFF, 0xFB, 0x7F, 0xF8, 0x00,
  0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00,
  0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x80, 0x00,
  0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// Option to invert axis in case oscilloscope does not support this
constexpr bool FLIP_X = true;
constexpr bool FLIP_Y = true;

// Print string at (X, Y).
// This needs to be called in a loop to persist on oscilliscope display.
void print(uint8_t x, uint8_t y, const char* str) {
  for (uint8_t row = 0; row < 8; ++row) {
    // Repeat each row twice (double pixels vertically)
    for (uint8_t dup = 0; dup < 2; ++dup) {
      for (uint8_t col = 0; col < 8; ++col) {
        char c = str[col];

        // End row early if we find end of string (null terminator)
        if (c == '\0')
          break;

        // Skip non-printable characters
        if (c < ' ' || c > 'z')
          continue;

        // Look-up scanline for character at current row
        uint8_t scan = pgm_read_byte(&CHAR_ROM[(c - 0x20) * 8 + row]);

        // Skip blank scanlines
        if (scan == 0)
          continue;

        // Write Y only if we find a non-blank scanline
        if (FLIP_Y) {
          PortC::write(63 - ((y + row) * 2 + dup));
        } else {
          PortC::write((y + row) * 2 + dup);
        }

        // Write X for each set pixel
        for (uint8_t i = 0; i < 8; ++i, scan <<= 1) {
          if (scan >= 0x80) {
            if (FLIP_X) {
              PortB::write(63 - (x + col * 8 + i));
            } else {
              PortB::write(x + col * 8 + i);
            }
          }
        }
      }
    }
  }
}

// Character buffer for text messages
char SCREEN_RAM[4][8];

// Write screen buffer to display
void print_screen() {
  for (uint8_t row = 0; row < 4; ++row) {
    print(0, row*8, SCREEN_RAM[row]);
  }
}

// Function to call while waiting for serial input
uCLI::IdleFn idle_fn = print_screen;

// Clear each row of screen buffer
void clear_screen(uCLI::Args) {
  SCREEN_RAM[0][0] = '\0';
  SCREEN_RAM[1][0] = '\0';
  SCREEN_RAM[2][0] = '\0';
  SCREEN_RAM[3][0] = '\0';
}

// Copy logo to screen buffer
void init_logo(uCLI::Args) {
  strncpy(SCREEN_RAM[0], "````````", 8);
  strncpy(SCREEN_RAM[1], "Trevor", 8);
  strncpy(SCREEN_RAM[2], "  Makes!", 8);
  strncpy(SCREEN_RAM[3], "````````", 8);
  idle_fn = print_screen;
}

// Scroll screen buffer and add message at bottom
void write_msg(uCLI::Args args) {
  char* message = args.remainder();
  strncpy(SCREEN_RAM[0], SCREEN_RAM[1], 8);
  strncpy(SCREEN_RAM[1], SCREEN_RAM[2], 8);
  strncpy(SCREEN_RAM[2], SCREEN_RAM[3], 8);
  strncpy(SCREEN_RAM[3], message, 8);
}

// Lookup table for cached sine values
uint8_t SINE_TABLE[256];

// Output sine and cosine to X and Y channels
void draw_circle() {
  uint8_t i = 0;
  do {
    // Shift phase of second channel by 90° (64/256) so we have sine and cosine
    PortB::write(SINE_TABLE[i]);
    PortC::write(SINE_TABLE[uint8_t(i + 64)]);
  } while (++i != 0); // Loop until i wraps from 255 back to 0
}

// Start drawing circle in idle loop
void init_circle(uCLI::Args) {
  // Compute sine lookup table
  uint8_t i = 0;
  do {
    // Domain: 0 to 2π in 256 steps, Range: 0 to 62
    SINE_TABLE[i] = uint8_t(31.f * (1.f + sin(i * (PI / 128.f))));
  } while (++i != 0); // Loop until i wraps from 255 back to 0

  // Switch idle function to draw circle
  idle_fn = draw_circle;
}

const uint8_t* bitmap_ptr;

void draw_bitmap() {
  for (uint8_t row = 0; row < 64; ++row) {
    for (uint8_t col = 0; col < 8; ++col) {
      uint8_t scan = pgm_read_byte(&bitmap_ptr[row * 8 + col]);

      // Skip blank scanlines
      if (scan == 0)
        continue;

      // Write Y only if we find a non-blank scanline
      if (FLIP_Y) {
        PortC::write(63 - row);
      } else {
        PortC::write(row);
      }

      // Write X for each set pixel
      for (uint8_t i = 0; i < 8; ++i, scan <<= 1) {
        if (scan >= 0x80) {
          if (FLIP_X) {
            PortB::write(63 - (col * 8 + i));
          } else {
            PortB::write(col * 8 + i);
          }
        }
      }
    }
  }
}

void init_doge(uCLI::Args) {
  bitmap_ptr = DOGE_ROM;
  idle_fn = draw_bitmap;
}

void init_pepe(uCLI::Args) {
  bitmap_ptr = PEPE_ROM;
  idle_fn = draw_bitmap;
}

void setup() {
  PortB::config_output();
  PortC::config_output();

  // Call init_logo with empty uCLI::Args
  init_logo({});

  // Establish serial connection with computer
  Serial.begin(9600);
  while (!Serial) {}
}

void loop() {
  static const uCLI::Command commands[] = {
    { "logo", init_logo },
    { "clear", clear_screen },
    { "write", write_msg },
    { "circle", init_circle },
    { "doge", init_doge },
    { "pepe", init_pepe },
  };

  // Prompt for a command from the list while looping over the idle function
  uCLI::run_command(Serial, commands, idle_fn);
}
